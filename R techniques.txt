To extract specific rows of data based on specified condition(s):
x <- "data.csv"
y <- subset(x, condition(s))


To extract a set of columns from data frame:
z <- x[1:3]   ##this would extract columns 1-3 of the data and store it in the variable "z"


To print the mean of each column (where x is the data):
colMeans(x, TRUE)  ## TRUE tells the function to ignore NA's


To create a simple vector (concatenate):
c(value1, value2, ... etc)


To access help docs on a function, type '?' and then the function:
ie. '?c' will provide the help docs on c()


A lot of file commands (like create and rename) can be found with the command prefix 'file.'


To delete a directory:
unlink("directory", recursive = TRUE)


for loop structure:

for(i in 1:10) {
	## do something
}

## can also use 'seq_along(variable)' which produces the length of the vector variable

ie:
for(i in seq_along(x) {
	## do something
}


Lazy evaluation:
R will only evaluate arguments as they are utilized
ie. func(a, b) could be run with f(5) if 'b' is never used in function


Working with many csv files:
var1 <- read.csv("dir1/file.csv")  ## reads the csv to a variable 'var1'
head(var1)  ## outputs the first few rows of data
length(var1$ColVal)  ## produces the number of rows for the column 'ColVal' in the var1 dataset
dim(var1)  ## this produces all the dimension info for the dataset
summary(var1)  ## can provide a statistical summary of the data
subset(var1$Weight, var1$Day==30)  ## produces a subset of the data with "weight" column and for rows where day==30
files_full <- list.files("diet_data", full.names=TRUE)  ## assigns the list of files into the variable with full pathnames
andy_david <- rbind(andy, read.csv(files_full[2]))  ## appends/binds 'andy' data with 'david' data

## rbind in conjunction with a for-loop can enable you to append multiple files together
dat <- data.frame()
for (i in 1:5) {
        dat <- rbind(dat, read.csv(files_full[i]))
}
str(dat)


To utilize an R script:
source('script_name.R')  ## enter this in the console while in the containing directory of the script file


lapply()  #will apply a function over each element in a list
sapply()  #simpler version of lapply(), returns a vector of values

rowSums, rowMeans, colSums, colMeans   #optimized functions to sum up columns/rows or take the means


invisible(x)  # won't print the last line of a function to the console

ie:

printmessage <- function(x) {
	if (x > 0)
		print("x is greater than zero")
	else
		print("x is less than or equal to zero")
	invisible(x)
}


str(x)  ## An extremely useful tool that provides info about the function or variable that you pass in

ie. str(airquality_dataset)  ## will provide a breakdown of elements in the dataset
 

Subsetting a vector:

x <- c("a", "b", "c", "d")

x[1]  ## outputs "a" because it is the first element in vector 'x'
x[1:4]  ## outputs "a" "b" "c" "d"
x[x > "a"]  ## will only output the letters greater than "a"

u <- x > "a"  ## similar to piping in linux, will output a logical vector to 'u' where TRUE is given
## for each element if greater than "a", FALSE otherwise


Subsetting a matrix:

u <- matrix(1:6, 2, 3)  ## this produces a matrix with values 1:6, with 2 rows and 3 columns. Values in matrix populate from top left to bottom left, then next column ...etc
u[1,2]  ## will produce a vector of the value in the 1st row and 2nd column, so the value 3
u[1,]   ## this will subset out the entire 1st row of the matrix 'u'
u[,2]   ## this will subset the entire 2nd column from 'u'